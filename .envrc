# Ensure ssh-agent is running before starting nix.
# For `stack`, `nix-shell` is bundling a version of `git` which relies on
# `OpenSSH`. The version of `OpenSSH` bundled with `nix` does not have support
# for MacOS' keychain, and so every time you fire of a `git` command from within
# `nix-shell` you'll be prompted for the passphrase of your ssh key.
# We can circumvent this by ensuring an `ssh-agent` is running before we enter
# the nix-shell, which is what the following command does.
ssh-add -K

# Load `shell.nix` binaries onto path.

# Usage: use nix_shell
#
# Works like use_nix, except that it's only rebuilt if the shell.nix or default.nix file changes.
# This avoids scenarios where the nix-channel is being updated and all the projects now need to be re-built.
#
# To force the reload the derivation, run `touch shell.nix`
use_nix_shell() {
  local nixcache=".direnv.cache"

  if [[ ! -e "$nixcache" ]] || [[ ".envrc" -nt "$nixcache" ]] || [[ "default.nix" -nt "$nixcache" ]] || [[ "shell.nix" -nt "$nixcache" ]]; then
    nix-shell --show-trace "$@" --run 'direnv dump' > "$nixcache"
  fi
  direnv_load cat "$nixcache"
  if [[ $# = 0 ]]; then
    watch_file default.nix
    watch_file shell.nix
  fi
}
use_nix_shell
